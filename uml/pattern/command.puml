@startuml
class Client
note left
    클라이언트는 ConcreteCommand를
    생성하고 Receiver를 설정함
end note
class Invoker{
    setCommand()
}
note top of Invoker
    인보커에는 명령이 들어 있으며
    execute() 메소드를 호출함으로써
    커맨드 객체에 특정 작업을 수행해
    달라는 요구를 하게된다.
end note
interface Command{
    execute()
    undo()
}
note top
    모든 커맨드 객체에서 구현해야 하는 I
    모든 명령은 execute() 메소드 호출로 수행
    이 메소드는 리시버에 특정작업을 처리하라는
    지시를 전달한다.
end note
class Receiver{
    action()
}
note top
    리시버는 요구사항을 수행할 때 어떤 일을
    처리해야 하는지 알고있는 객체
end note
class ConcreteCommand{
    execute()
    undo()
}
note bottom
    ConcreteCommand는 특정 행동과 리시버를 연결
    인보커에서 execute() 호출로 요청하면
    리시버에 있는 메소드를 호출해서 그 작업을 처리
end note
Client --> Invoker
Client --> Receiver
Invoker --> Command
Client --> ConcreteCommand
ConcreteCommand <-- Receiver
ConcreteCommand ..|> Command
@enduml